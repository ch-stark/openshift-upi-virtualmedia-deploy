env.SSH="ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@${params.HOST}"

pipeline {
    options {
        buildDiscarder(logRotator(numToKeepStr: '100'))
    }

    parameters {
        string(name:"PODMAN_REGISTRY", defaultValue: "quay.io/yrobla", description: "Where to push the built image", trim: true)
        string(name:"IMAGE_NAME", defaultValue: "coreos-live-cd", description: "Name of the image to push", trim: true)
        string(name:"GIT_REPO", defaultValue: "git://github.com/yrobla/openshift-upi-virtualmedia-deploy.git", description: "Repo to clone containing the Dockerfile for the image", trim: true)
        string(name:"GIT_BRANCH", defaultValue: "master", description: "Branch for the git repo", trim: true)
        booleanParam(name:"PUSH_TO_REGISTRY", defaultValue: false, description: "Push generated image to registry")
    }

    agent { label 'worker' }

    environment {
            BASE_REPO_DIR = sh(returnStdout: true, script: "echo $WORKSPACE/openshift-upi-virtualmedia-deploy").trim()
    }

    stages {
        stage('Prepare Workspace') {
            steps {
                // cleanup workspace
                step([$class: 'WsCleanup'])

                script {
                    // Set the build description to trigger user
                    currentBuild.getBuildCauses().reverse().eachWithIndex { foo, index ->
                        if(currentBuild.getBuildCauses().reverse()[index].userName != null) {
                            currentBuild.description = "Triggered by: " + currentBuild.getBuildCauses().reverse()[index].userName
                            return true
                        }
                    }
                }

                sh '''
		# clone the repo
                git -c http.sslVerify=false clone --single-branch --branch $GIT_BRANCH $GIT_REPO $BASE_REPO_DIR
                '''

            }
        }

        stage('Build image') {            
            steps {
                sh '''
		pushd $BASE_REPO_DIR/images
		podman build -t ${PODMAN_REGISTRY}/${IMAGE_NAME} .
		popd
                '''
            }
        }
        stage('Push the image to registry') {
            when {
                anyOf {
                    environment name: 'PUSH_TO_REGISTRY', value: 'true'
                }
            }
            steps {
                sh '''
                    podman login ${PODMAN_REGISTRY}
		    podman push ${PODMAN_REGISTRY}/${IMAGE_NAME}
                '''
            }
        }

    }
}  // pipeline
